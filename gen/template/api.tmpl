{{- /*gotype: github.com/x5iu/defc/gen.apiContext*/ -}}

{{- range $index, $buildTags := $.BuildTags }}
    //{{ $buildTags }}
{{- end }}

// Code generated by defc, DO NOT EDIT.

package {{ $.Package }}

import (
{{ range $index, $import := $.MergedImports }} {{ $import }}
{{ end }}
)

{{ block "schema" $ }}{{ end }}

const (
{{ range $index, $method := $.Methods }}{{ if and (not (isInner $method.Ident)) (not (isResponse $method.Ident)) }}
    {{ $.Ident }}Method{{ $method.Ident }} = "{{ $method.Ident }}"{{ end }}{{ end }}
)

{{ $impName := (printf "impl%s" $.Ident) }}
{{ $receiver := (printf "%s%s" $impName ($.GenericsRepr false) ) }}

{{ $innerField := (printf "__%s" $.Ident) }}
func New{{- $.Ident }}{{ $.GenericsRepr true }}({{ if $.HasInner }} {{ $.Ident }} {{ getRepr $.InnerType }} {{ end }}) {{ $.Ident }}{{ $.GenericsRepr false }} {
return &{{ $receiver }}{ {{ if $.HasInner }} {{ $innerField }}: {{ $.Ident }} {{ end }} }
}

type {{ $impName }}{{ $.GenericsRepr true }} struct{
{{- if $.HasInner }}
    {{ $innerField }} {{ getRepr $.InnerType }}
{{ end -}}
}

{{ $additionalFuncs := $.AdditionalFuncs }}
var (
{{ range $index, $method := $.Methods }} {{ if and (not (and $method.ReturnSlice ($.HasFeature "api/page"))) (not (isInner $method.Ident)) (not (isResponse $method.Ident)) }}
    {{ printf "addr%sTmpl%s" $.Ident $method.Ident }} = template.Must(template.New("Address{{ $method.Ident }}"){{ if gt (len $additionalFuncs) 0 }}.Funcs(template.FuncMap{ {{ range $key, $func := $additionalFuncs }} {{ quote $key }}: {{ $func }}, {{ end }} }){{ end }}.Parse({{ quote ($method.TmplURL) }})) {{ if ne $method.Header "" }}
        {{ printf "header%sTmpl%s" $.Ident $method.Ident }} = template.Must(template.New("Header{{ $method.Ident }}"){{ if gt (len $additionalFuncs) 0 }}.Funcs(template.FuncMap{ {{ range $key, $func := $additionalFuncs }} {{ quote $key }}: {{ $func }}, {{ end }} }){{ end }}.Parse({{ quote $method.TmplHeader }})) {{ end }} {{ end }} {{ end }}
)

{{ $getBufferFunc := (printf "__%sGetBuffer" $.Ident) }}
{{ $putBufferFunc := (printf "__%sPutBuffer" $.Ident) }}
{{ $newFunc := (printf "__%sNew" $.Ident) }}
{{ $responseInterface := (printf "%sResponseInterface" $.Ident) }}
{{ $newResponseErrorFunc := (printf "__%sNewResponseError" $.Ident) }}
{{ $responseErrorInterface := (printf "%sResponseErrorInterface" $.Ident) }}
{{ range $index, $method := $.Methods }}
    {{ $sortIn := $method.SortIn }}
    {{- $httpMethod := $method.MethodHTTP }}
    {{ $shouldRetry := and ($.HasFeature "api/future") ($.HasFeature "api/retry") (not (isResponse $method.Ident)) (not (isInner $method.Ident)) }}
    {{ if $shouldRetry }}
        func ({{ if not (isResponse $method.Ident) }} __imp {{ end }} *{{ $receiver }}) {{ $method.Ident }}(
        {{- range $index, $ident := $sortIn -}}
            {{- $ident }} {{ getRepr (index $method.In $ident) }},
        {{- end -}}
        )
        {{- if gt (len $method.Out) 0 -}}
            (
            {{- range $index, $type := $method.Out -}}
                {{- getRepr $type }},
            {{- end -}}
            )
        {{- end -}}
        {
        __maxRetry := {{ $method.MaxRetry }}
        {{ if (and (httpMethodHasBody $httpMethod) (not (headerHasBody $method.TmplHeader))) }}
            var (
            __reader = any({{- range $index, $ident := $sortIn -}}
                {{- if eq $index (sub (len $sortIn) 1) -}}
                    {{- if isEllipsis (index $method.In $ident) -}}
                        {{- $index = sub $index 1 -}}
                    {{- end -}}
                    {{- index $sortIn $index -}}
                {{- end -}}
            {{- end -}})
            __reset interface{ Reset() error }
            __readerCanReset bool
            )

            if __reset, __readerCanReset = __reader.(interface{ Reset() error }); !__readerCanReset {
            __maxRetry = 0
            }
        {{ end }}
        __retryCount := 0
        __RETRY:
        var (
        {{ range $index, $type := $method.Out -}}
            {{ if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }} {{ getRepr $type }}
            {{ end -}}
        {{- end -}}
        {{- $err := printf "err%s" $method.Ident }}
        {{- $err }} error
        )
        {{ if (and (httpMethodHasBody $httpMethod) (not (headerHasBody $method.TmplHeader))) }}
            if __readerCanReset {
            if {{ $err }} = __reset.Reset(); {{ $err }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}} {{ $err }}
            }
            }
        {{ end }}
        {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}} {{ $err }} = __imp.__{{ $method.Ident }}(
        {{- range $index, $ident := $sortIn -}}
            {{- $ident }}{{ if isEllipsis (index $method.In $ident) }}...{{ end }},
        {{- end -}}
        )
        if {{ $err }} != nil {
        if __retryCount < __maxRetry {
        if __getResponse, ok := {{ $err }}.({{ if $.HasFeature "api/nort" }}{{ $responseErrorInterface }}{{ else }}__rt.FutureResponseError{{ end }}); ok {
        __getResponse.Response().Body.Close()
        }
        __retryCount++
        goto __RETRY
        }
        }
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}} {{ $err }}
        }
    {{ end }}

    func ({{ if not (isResponse $method.Ident) }} __imp {{ end }} *{{ $receiver }}) {{ if $shouldRetry }}__{{ end }}{{ $method.Ident }}(
    {{- range $index, $ident := $sortIn -}}
        {{- $ident }} {{ getRepr (index $method.In $ident) }},
    {{- end -}}
    )
    {{- if gt (len $method.Out) 0 -}}
        (
        {{- range $index, $type := $method.Out -}}
            {{- getRepr $type }},
        {{- end -}}
        )
    {{- end -}}
    {
    {{- if isResponse $method.Ident }}
        return {{ if gt (len $method.Out) 0 -}}
            {{ range $index, $type := $method.Out -}}
                {{ if isPointer $type -}}
                    new({{ getRepr (indirect $type) }})
                {{ else -}}
                    {{ if $.HasFeature "api/nort" }}{{ $newFunc }}{{ else }}__rt.New{{ end }}[{{ getRepr $type }}]()
                {{ end -}}
                {{- if gt $index 0 }} , {{ end -}}
            {{ end -}}
        {{ end -}}
    {{ else if isInner $method.Ident }}
        return __imp.{{ $innerField }}
    {{ else if gt (len ($method.MetaArgs)) 1 }}
        {{ $inner := printf "inner%s" $method.Ident }}
        {{- $cache := printf "cache%s" $method.Ident -}}
        {{- $ok := printf "ok%s" $method.Ident -}}

        {{- if $.HasInner -}}
            {{- if or ($.HasFeature "api/cache") ($.HasFeature "api/log") ($.HasFeature "api/logx") ($.HasFeature "api/client") -}}
                var {{ $inner }} any = __imp.{{ methodInner }}()
            {{- end -}}
        {{ end -}}

        {{ if $.HasFeature "api/cache" }}

            if {{ $cache }}, {{ $ok }} := {{ $inner }}.(interface{
            GetCache(string, ...any) []any
            }); {{ $ok }} {
            {{- $cacheValues := printf "cacheValues%s" $method.Ident -}}
            if {{ $cacheValues }} := {{ $cache }}.GetCache({{ quote $method.Ident }}, {{- range $index, $ident := $sortIn -}}
                {{- $ident }},
            {{- end -}});
            {{ $cacheValues }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    {{- $cacheValues -}}[{{ $index }}].({{ getRepr $type }}),
                {{- end -}}
            {{- end -}}
            nil
            }
            }

        {{ end -}}
        {{- $values := printf "values%s" $method.Ident -}}
        {{- $n := printf "n%s" $method.Ident -}}
        {{- $page := printf "page%s" $method.Ident -}}
        {{- $addrTmpl := printf "addr%sTmpl%s" $.Ident $method.Ident -}}
        {{- $headerTmpl := printf "header%sTmpl%s" $.Ident $method.Ident -}}
        {{- if $method.ReturnSlice }}
            var (
            {{ if gt (len $method.Out) 1 -}}
                {{ $type := index $method.Out 0 -}}
                {{ $values }} = make({{ getRepr $type }}, 0, 32)
            {{- end }}
            {{- if $.HasFeature "api/page" }}
                {{ $n }}    = 0
                {{ $page }} = func() int {
                current := {{ $n }}
                {{ $n }}++
                return current
                }
                {{ $addrTmpl }} = template.Must(
                template.New("Address{{ $method.Ident }}").
                Funcs(template.FuncMap{
                "page": {{ $page }},
                {{ range $key, $func := $additionalFuncs }} {{ quote $key }}: {{ $func }},
                {{ end }}
                }).
                Parse({{ quote ($method.TmplURL) }}),
                )
                {{ if ne $method.Header "" -}}
                    {{ $headerTmpl }} = template.Must(
                    template.New("Header{{ $method.Ident }}").
                    Funcs(template.FuncMap{
                    "page": {{ $page }},
                    {{ range $key, $func := $additionalFuncs }} {{ quote $key }}: {{ $func }},
                    {{ end }}
                    }).
                    Parse({{ quote $method.TmplHeader }}),
                    )
                {{- end }}
            {{- end }}
            )
        {{ end }}

        {{ $addr := printf "addr%s" $method.Ident -}}
        {{ if $.HasFeature "api/nort" }}
            {{ $addr }} := {{ $getBufferFunc }}()
            defer {{ $putBufferFunc }}({{ $addr }})
            defer {{ $addr }}.Reset()
        {{ else }}
            {{ $addr }} := __rt.GetBuffer()
            defer __rt.PutBuffer({{ $addr }})
            defer {{ $addr }}.Reset()
        {{ end }}

        {{ $header := printf "header%s" $method.Ident -}}
        {{ if ne $method.Header "" -}}
            {{ if $.HasFeature "api/nort" }}
                {{ $header }} := {{ $getBufferFunc }}()
                defer {{ $putBufferFunc }}({{ $header }})
                defer {{ $header }}.Reset()
            {{ else }}
                {{ $header }} := __rt.GetBuffer()
                defer __rt.PutBuffer({{ $header }})
                defer {{ $header }}.Reset()
            {{ end }}
        {{- end }}

        {{ $responseBody := printf "responseBody%s" $method.Ident -}}
        {{ if not ($.HasFeature "api/future") }}
            {{ if $.HasFeature "api/nort" }}
                {{ $responseBody }} := {{ $getBufferFunc }}()
                defer {{ $putBufferFunc }}({{ $responseBody }})
                defer {{ $responseBody }}.Reset()
            {{ else }}
                {{ $responseBody }} := __rt.GetBuffer()
                defer __rt.PutBuffer({{ $responseBody }})
                defer {{ $responseBody }}.Reset()
            {{ end }}
        {{ end }}

        var (
        {{ range $index, $type := $method.Out -}}
            {{ if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }}={{ if isPointer $type }}new({{ getRepr (indirect $type) }}){{ else }}{{ if $.HasFeature "api/nort" }}{{ $newFunc }}{{ else }}__rt.New{{ end }}[{{ getRepr $type }}](){{ end }}
            {{ end -}}
        {{- end -}}
        )

        {{ if $method.ReturnSlice -}}
            loop:
            for {
        {{ end -}}
        var (
        {{- $err := printf "err%s" $method.Ident }}
        {{- $err }} error
        {{ $httpResponse := printf "httpResponse%s" $method.Ident -}}
        {{ $httpResponse }} *http.Response
        {{ $response := printf "response%s" $method.Ident -}}
        {{ $response }} {{ if $.HasFeature "api/nort" }}{{ $responseInterface }}{{ else }}{{ if $.HasFeature "api/future" }}__rt.FutureResponse{{ else }}__rt.Response{{ end }}{{ end }} = __imp.{{ methodResp }}()
        )

        if {{ $err }} = {{ $addrTmpl }}.Execute({{ $addr }}, map[string]any{
        {{ if $.HasInner -}}
            "{{ $.Ident }}": __imp.{{ methodInner }}(),
        {{ end -}}
        {{ range $index, $ident := $sortIn -}}
            "{{- $ident }}": {{ $ident -}},
        {{ end }}
        }); {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error building '{{ $method.Ident }}' url: %w", {{ $err }})
        }

        {{ $bufReader := printf "bufReader%s" $method.Ident }}
        {{ $mimeHeader := printf "mimeHeader%s" $method.Ident -}}
        {{ if ne $method.Header "" -}}
            if {{ $err }} = {{ $headerTmpl }}.Execute({{ $header }}, map[string]any{
            {{ if $.HasInner -}}
                "{{ $.Ident }}": __imp.{{ methodInner }}(),
            {{ end -}}
            {{ range $index, $ident := $sortIn -}}
                "{{- $ident }}": {{ $ident -}},
            {{ end }}
            }); {{ $err }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            fmt.Errorf("error building '{{ $method.Ident }}' header: %w", {{ $err }})
            }
            {{ $bufReader }} := bufio.NewReader({{ $header }})
            {{ $mimeHeader }}, {{ $err }} := textproto.NewReader({{ $bufReader }}).ReadMIMEHeader()
            if {{ $err }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            fmt.Errorf("error reading '{{ $method.Ident }}' header: %w", {{ $err }})
            }
        {{- end }}

        {{ $url := printf "url%s" $method.Ident -}}
        {{ $url }} := {{ $addr }}.String()
        {{- $request := printf "request%s" $method.Ident -}}
        {{- if httpMethodHasBody $httpMethod }}
            {{- if headerHasBody $method.TmplHeader }}
                {{- if $.HasFeature "api/logx" }}
                    {{- $body := printf "requestBody%s" $method.Ident }}
                    {{ $body }}, {{ $err }} := io.ReadAll({{ $bufReader }})
                    if {{ $err }} != nil {
                    return {{ range $index, $type := $method.Out -}}
                        {{- if lt $index (sub (len $method.Out) 1) -}}
                            v{{- $index -}}{{- $method.Ident }},
                        {{- end -}}
                    {{- end -}}
                    fmt.Errorf("error reading '{{ $method.Ident }}' request body: %w", {{ $err }})
                    }
                    {{ $request }}, {{ $err }} := http.NewRequest{{ if $method.HasContext }}WithContext{{ end }}({{ if $method.HasContext }}ctx, {{ end }}{{ quote $httpMethod }}, {{ $url }}, bytes.NewReader({{ $body }}))
                {{ else }}
                    {{ $request }}, {{ $err }} := http.NewRequest{{ if $method.HasContext }}WithContext{{ end }}({{ if $method.HasContext }}ctx, {{ end }}{{ quote $httpMethod }}, {{ $url }}, {{ $bufReader }})
                {{ end -}}
            {{ else }}
                {{ $request }}, {{ $err }} := http.NewRequest{{ if $method.HasContext }}WithContext{{ end }}({{ if $method.HasContext }}ctx, {{ end }}{{ quote $httpMethod }}, {{ $url }}, {{- range $index, $ident := $sortIn -}}
                    {{- if eq $index (sub (len $sortIn) 1) -}}
                        {{- if isEllipsis (index $method.In $ident) -}}
                            {{- $index = sub $index 1 -}}
                        {{- end -}}
                        {{- index $sortIn $index -}}
                    {{- end -}}
                {{- end -}})
            {{ end -}}
        {{ else }}
            {{ $request }}, {{ $err }} := http.NewRequest{{ if $method.HasContext }}WithContext{{ end }}({{ if $method.HasContext }}ctx, {{ end }}{{ quote $httpMethod }}, {{ $url }}, http.NoBody)
        {{ end -}}
        if {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error building '{{ $method.Ident }}' request: %w", {{ $err }})
        }

        {{ if ne $method.Header "" -}}
            {{ $k := printf "k%s" $method.Ident -}}
            {{ $vv := printf "vv%s" $method.Ident -}}
            {{ $v := printf "v%s" $method.Ident -}}
            for {{ $k }}, {{ $vv }} := range {{ $mimeHeader }} {
            for _, {{ $v }} := range {{ $vv }} {
            {{ $request }}.Header.Add({{ $k }}, {{ $v }})
            }
            }
        {{- end }}

        {{ if $.HasFeature "api/gzip" }}
            {{ $request }}.Header.Add("Accept-Encoding", "gzip")
        {{ end }}

        {{ $requestOptions := $method.RequestOptions }}
        {{ if $requestOptions }}
            for _, opt := range {{ $requestOptions }} {
            if opt != nil {
            opt({{ $request }})
            }
            }
        {{ end }}

        {{- $log := printf "log%s" $method.Ident }}
        {{ $start := printf "start%s" $method.Ident }}
        {{ if or ($.HasFeature "api/log") ($.HasFeature "api/logx") }}
            {{ $start }} := time.Now()
        {{ end }}

        {{ $httpClient := printf "httpClient%s" $method.Ident -}}
        {{ if $.HasFeature "api/client" }}
            if {{ $httpClient }}, {{ $ok }} := {{ $inner }}.(interface{ Client() *http.Client }); {{ $ok }} {
            {{ $httpResponse }}, {{ $err }} = {{ $httpClient }}.Client().Do({{ $request }})
            } else {
            {{ $httpResponse }}, {{ $err }} = http.DefaultClient.Do({{ $request }})
            }
        {{ else }}
            {{ $httpResponse }}, {{ $err }} = http.DefaultClient.Do({{ $request }})
        {{ end }}

        {{ if $.HasFeature "api/log" }}
            if {{ $log }}, {{ $ok }} := {{ $inner }}.(interface{ Log(ctx context.Context, caller string, method string, url string, elapse time.Duration) }); {{ $ok }} {
            {{ $log }}.Log({{ if $method.HasContext }}ctx{{ else }}context.Background(){{ end }}, {{ quote $method.Ident }}, {{ quote $httpMethod }}, {{ $url }}, time.Since({{ $start }}))
            }
        {{ end }}

        {{ if $.HasFeature "api/logx" }}
            if {{ $log }}, {{ $ok }} := {{ $inner }}.(interface{ Log(ctx context.Context, caller string, request *http.Request, response *http.Response, elapse time.Duration) }); {{ $ok }} {
            {{ $log }}.Log({{ if $method.HasContext }}ctx{{ else }}context.Background(){{ end }}, {{ quote $method.Ident }}, {{ $request }}, {{ $httpResponse }}, time.Since({{ $start }}))
            }
        {{ end }}

        if {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error sending '{{ $method.Ident }}' request: %w", {{ $err }})
        }

        {{ if $.HasFeature "api/gzip" }}
        func() {
            for _, contentEncoding := range {{ $httpResponse }}.Header.Values("Content-Encoding") {
                if commaIndex := strings.IndexByte(contentEncoding, ','); commaIndex >= 0 {
                    contentEncoding = contentEncoding[:commaIndex]
                }
                if strings.TrimSpace(contentEncoding) == "gzip" {
                    {{ $httpResponse }}.Body = &__rt.GzipReadCloser{R: {{ $httpResponse }}.Body}
                    return
                }
            }
        }()
        {{ end }}

        {{ if $.HasFeature "api/future" }}
            {{ if not ( $.HasFeature "api/ignore-status" ) }}
                if {{ $httpResponse }}.StatusCode < 200 || {{ $httpResponse }}.StatusCode > 299 {
                return {{ range $index, $type := $method.Out -}}
                    {{- if lt $index (sub (len $method.Out) 1) -}}
                        v{{- $index -}}{{- $method.Ident }},
                    {{- end -}}
                {{- end -}}
                {{ if $.HasFeature "api/error" -}}
                    {{ if $.HasFeature "api/nort" -}}
                        {{ $newResponseErrorFunc }}({{ quote $method.Ident }}, {{ $httpResponse }})
                    {{ else -}}
                        __rt.NewFutureResponseError({{ quote $method.Ident }}, {{ $httpResponse }})
                    {{ end -}}
                {{ else -}}
                    {{ $httpResponse }}.Body.Close()
                    fmt.Errorf("response status code %d for '{{ $method.Ident }}'", {{ $httpResponse }}.StatusCode)
                {{ end -}}
                }
            {{ end }}

            if {{ $err }} = {{ $response }}.FromResponse({{ quote $method.Ident }}, {{ $httpResponse }}); {{ $err }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            fmt.Errorf("error converting '{{ $method.Ident }}' response: %w", {{ $err }})
            }
        {{ else }}
            if _, {{ $err }} = io.Copy({{ $responseBody }}, {{ $httpResponse }}.Body); {{ $err }} != nil {
            {{ $httpResponse }}.Body.Close()
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            fmt.Errorf("error copying '{{ $method.Ident }}' response body: %w", {{ $err }})
            } else {
            {{ $httpResponse }}.Body.Close()
            }

            {{ if not ( $.HasFeature "api/ignore-status" ) }}
                if {{ $httpResponse }}.StatusCode < 200 || {{ $httpResponse }}.StatusCode > 299 {
                return {{ range $index, $type := $method.Out -}}
                    {{- if lt $index (sub (len $method.Out) 1) -}}
                        v{{- $index -}}{{- $method.Ident }},
                    {{- end -}}
                {{- end -}}
                {{ if $.HasFeature "api/error" -}}
                    {{ if $.HasFeature "api/nort" -}}
                        {{ $newResponseErrorFunc }}({{ quote $method.Ident }}, {{ $httpResponse }}.StatusCode, {{ $responseBody }}.Bytes())
                    {{ else -}}
                        __rt.NewResponseError({{ quote $method.Ident }}, {{ $httpResponse }}.StatusCode, {{ $responseBody }}.Bytes())
                    {{ end -}}
                {{ else -}}
                    fmt.Errorf("response status code %d for '{{ $method.Ident }}' with body: \n\n%s\n\n", {{ $httpResponse }}.StatusCode, {{ $responseBody }}.String())
                {{ end -}}
                }
            {{ end }}

            if {{ $err }} = {{ $response }}.FromBytes({{ quote $method.Ident }}, {{ $responseBody }}.Bytes()); {{ $err }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            fmt.Errorf("error converting '{{ $method.Ident }}' response: %w", {{ $err }})
            }
        {{ end }}

        {{ $addr }}.Reset() {{ if ne $method.Header "" }}
            {{ $header }}.Reset(){{ end }}
        {{ if not ($.HasFeature "api/future") }}{{ $responseBody }}.Reset(){{ end }}

        if {{ $err }} = {{ $response }}.Err(); {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error returned from '{{ $method.Ident }}' response: %w", {{ $err }})
        }

        if {{ $err }} = {{ $response }}.ScanValues(
        {{- range $index, $expr := $method.ExtraScan -}}
            {{ $expr }},
        {{- end -}}
        {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                {{ if not (isPointer $type) }}&{{ end }}v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        ); {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error scanning value from '{{ $method.Ident }}' response: %w", {{ $err }})
        }

        {{ if $method.ReturnSlice }}
            {{ if gt (len $method.Out) 1 }}
                {{ $values }} = append({{ $values }}, {{ range $index, $type := $method.Out -}}
                    {{- if and (eq $index 0) (lt $index (sub (len $method.Out) 1)) -}}
                        v{{ $index }}{{- $method.Ident }}...
                    {{- end -}}
                {{- end -}})
                {{ $setTotalCount := (printf "setTotalCount%s" $method.Ident) -}}
                if {{ $setTotalCount }}, {{ $ok }} := {{ $response }}.(interface{ SetTotalCount(total int) }); {{ $ok }} {
                {{ $setTotalCount }}.SetTotalCount(len({{ $values }}))
                }
            {{ end }}
            if {{ $response }}.Break() {
            break loop
            }
            }
        {{ end }}

        {{- if $method.ReturnSlice }}
            {{- if $.HasInner }}
                {{- if $.HasFeature "api/cache" }}
                    if {{ $cache }}, {{ $ok }} := {{ $inner }}.(interface{
                    SetCache(string, []any, ...any)
                    }); {{ $ok }} {
                    {{ $cache }}.SetCache(
                    {{ quote $method.Ident }},
                    []any{
                    {{- range $index, $ident := $sortIn -}}
                        {{- $ident }},
                    {{- end -}}
                    },
                    {{ range $index, $type := $method.Out -}}
                        {{- if and (eq $index 0) (lt $index (sub (len $method.Out) 1)) }}
                            {{- $values -}},
                        {{- else if lt $index (sub (len $method.Out) 1) -}}
                            v{{- $index -}}{{- $method.Ident }},
                        {{- end -}}
                    {{- end -}}
                    )
                    }
                {{- end }}
            {{- end }}

            return {{ range $index, $type := $method.Out -}}
                {{- if and (eq $index 0) (lt $index (sub (len $method.Out) 1)) }}
                    {{- $values -}},
                {{- else if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            nil
        {{ else }}
            {{- if $.HasInner }}
                {{- if $.HasFeature "api/cache" }}
                    if {{ $cache }}, {{ $ok }} := {{ $inner }}.(interface{
                    SetCache(string, []any, ...any)
                    }); {{ $ok }} {
                    {{ $cache }}.SetCache(
                    {{ quote $method.Ident }},
                    []any{
                    {{- range $index, $ident := $sortIn -}}
                        {{- $ident }},
                    {{- end -}}
                    },
                    {{ range $index, $type := $method.Out -}}
                        {{- if lt $index (sub (len $method.Out) 1) -}}
                            v{{- $index -}}{{- $method.Ident }},
                        {{- end -}}
                    {{- end -}}
                    )
                    }
                {{- end }}
            {{- end }}

            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            nil
        {{ end }}
    {{- else }}
        // TODO
        panic("unimplemented")
    {{- end -}}
    }
{{ end }}

{{ if $.HasFeature "api/nort" }}
    {{ $bufferPool := (printf "__%sBufferPool" $.Ident) }}
    var {{ $bufferPool }} = sync.Pool{
    New: func() any {
    return new(bytes.Buffer)
    },
    }

    func {{ $getBufferFunc }}() *bytes.Buffer {
    return {{ $bufferPool }}.Get().(*bytes.Buffer)
    }

    func {{ $putBufferFunc }}(buffer *bytes.Buffer) {
    {{ $bufferPool }}.Put(buffer)
    }

    type {{ $responseInterface }} interface {
    Err() error
    ScanValues(...any) error
    {{ if $.HasFeature "api/future" }}FromResponse(string, *http.Response) error{{ else }}FromBytes(string, []byte) error{{ end }}
    Break() bool
    }

    {{ $newTypeFunc := (printf "__%sNewType" $.Ident) }}
    func {{ $newTypeFunc }}(typ reflect.Type) reflect.Value {
    switch typ.Kind() {
    case reflect.Slice:
    return reflect.MakeSlice(typ, 0, 0)
    case reflect.Map:
    return reflect.MakeMap(typ)
    case reflect.Chan:
    return reflect.MakeChan(typ, 0)
    case reflect.Func:
    return reflect.MakeFunc(typ, func(_ []reflect.Value) (results []reflect.Value) {
    results = make([]reflect.Value, typ.NumOut())
    for i := 0; i < typ.NumOut(); i++ {
    results[i] = {{ $newTypeFunc }}(typ.Out(i))
    }
    return results
    })
    case reflect.Pointer:
    return reflect.New(typ.Elem())
    default:
    return reflect.Zero(typ)
    }
    }

    func {{ $newFunc }}[T any]() (v T) {
    val := reflect.ValueOf(&v).Elem()
    switch val.Kind() {
    case reflect.Slice, reflect.Map, reflect.Chan, reflect.Func, reflect.Pointer:
    val.Set({{ $newTypeFunc }}(val.Type()))
    }
    return v
    }

    {{ if $.HasFeature "api/error" }}
        {{ $implResponseError := (printf "__%sImplResponseError" $.Ident) }}
        {{ if $.HasFeature "api/future" }}
            // {{ $responseErrorInterface }} represents future Response error interface which would
            // be used in next major version of defc, who may cause breaking changes.
            //
            // generated with --features=api/future
            type {{ $responseErrorInterface }} interface {
            error
            Response() *http.Response
            }

            func {{ $newResponseErrorFunc }}(caller string, response *http.Response) {{ $responseErrorInterface }} {
            return &{{ $implResponseError }}{
            caller:   caller,
            response: response,
            }
            }

            type {{ $implResponseError }} struct {
            caller   string
            response *http.Response
            }

            func (e *{{ $implResponseError }}) Error() string {
            return fmt.Sprintf("response status code %d for '%s'", e.response.StatusCode, e.caller)
            }

            func (e *{{ $implResponseError }}) Response() *http.Response {
            return e.response
            }
        {{ else }}
            type {{ $responseErrorInterface }} interface {
            error
            Status() int
            Body() []byte
            }

            func {{ $newResponseErrorFunc }}(caller string, status int, body []byte) {{ $responseErrorInterface }} {
            return &{{ $implResponseError }}{
            caller: caller,
            status: status,
            body:   body,
            }
            }

            type {{ $implResponseError }} struct {
            caller string
            status int
            body   []byte
            }

            func (e *{{ $implResponseError }}) Error() string {
            return fmt.Sprintf("response status code %d for '%s' with body: \n\n%s\n\n", e.status, e.caller, string(e.body))
            }

            func (e *{{ $implResponseError }}) Status() int {
            return e.status
            }

            func (e *{{ $implResponseError }}) Body() []byte {
            return e.body
            }
        {{ end }}
    {{ end }}
{{ end }}
