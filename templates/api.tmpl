{{- /*gotype: github.com/x5iu/defc.ApiContext*/ -}}
// Code generated by defc, DO NOT EDIT

package {{ .Package }}

import (
{{ if $.HasFeature "api/log" -}}
    "time"
{{ end -}}
"fmt"
"io"
"net/http"
{{ if $.HasHeader -}}
    "bufio"
    "net/textproto"
{{ end -}}
{{ if importContext $.Methods -}}
    "context"
{{ end -}}
"text/template"
"github.com/x5iu/defc/__rt"
)

{{ $context := . }}
{{ $impName := (printf "impl%s" $.Ident) }}
{{ $receiver := (printf "%s%s" $impName ($.GenericsRepr false) ) }}

func New{{- .Ident }}{{ $.GenericsRepr true }}({{ if .HasInner }} inner {{ getRepr .InnerType }} {{ end }}) {{ .Ident }}{{ $.GenericsRepr false }} {
return {{ $receiver }}{ {{ if .HasInner }} inner {{ end }} }
}

type {{ $impName }}{{ $.GenericsRepr true }} struct{
{{- if .HasInner }}
    inner {{ getRepr .InnerType }}
{{ end -}}
}

{{ range $index, $method := .Methods }}
    {{ $sortIn := $method.SortIn }}
    func ({{ if not (isResponse $method.Ident) }} imp {{ end }} {{ $receiver }}) {{ $method.Ident }}(
    {{- range $index, $ident := $sortIn -}}
        {{- $ident }} {{ getRepr (index $method.In $ident) }},
    {{- end -}}
    )
    {{- if gt (len $method.Out) 0 -}}
        (
        {{- range $index, $type := $method.Out -}}
            {{- getRepr $type }},
        {{- end -}}
        )
    {{- end -}}
    {
    {{- if isResponse $method.Ident }}
        return {{ if gt (len $method.Out) 0 -}}
            {{ range $index, $type := $method.Out -}}
                {{- newType $type }} {{ if gt $index 0 }} , {{ end -}}
            {{ end -}}
        {{ end -}}
    {{ else if isInner $method.Ident }}
        return imp.inner
    {{ else if gt (len ($method.MetaArgs)) 1 }}
        {{ $inner := printf "inner%s" $method.Ident }}
        {{- $cache := printf "cache%s" $method.Ident -}}
        {{- $ok := printf "ok%s" $method.Ident -}}

        {{- if $context.HasInner -}}
            {{- if or ($context.HasFeature "api/cache") ($context.HasFeature "api/log") ($context.HasFeature "api/client") -}}
                var {{ $inner }} any = imp.inner
            {{- end -}}
        {{ end }}

        {{ if $context.HasFeature "api/cache" -}}

            if {{ $cache }}, {{ $ok }} := {{ $inner }}.(interface{
            GetCache(string, ...any) []any
            }); {{ $ok }} {
            {{- $cacheValues := printf "cacheValues%s" $method.Ident -}}
            if {{ $cacheValues }} := {{ $cache }}.GetCache({{ quote $method.Ident }}, {{- range $index, $ident := $sortIn -}}
                {{- $ident }},
            {{- end -}});
            {{ $cacheValues }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    {{- $cacheValues -}}[{{ $index }}].({{ getRepr $type }}),
                {{- end -}}
            {{- end -}}
            nil
            }
            }

        {{ end -}}
        {{- $values := printf "values%s" $method.Ident -}}
        {{- $n := printf "n%s" $method.Ident -}}
        {{- $page := printf "page%s" $method.Ident -}}
        {{- $addrTmpl := printf "addrTmpl%s" $method.Ident -}}
        {{- $headerTmpl := printf "headerTmpl%s" $method.Ident -}}
        var (
        {{- if $method.ReturnSlice }}
            {{ $type := index $method.Out 0 -}}
            {{ $values }} = make({{ getRepr $type }}, 0, 10)
            {{ $n }}    = 0
            {{ $page }} = func() int {
            current := {{ $n }}
            {{ $n }}++
            return current
            }
        {{- end }}
        {{ $addrTmpl }} = template.New("Address{{ $method.Ident }}"){{- if $method.ReturnSlice -}}
            .Funcs(template.FuncMap{
            "page": {{ $page }},
            })
        {{- end }}
        {{ if ne $method.Header "" -}}
            {{ $headerTmpl }} = template.New("Header{{ $method.Ident }}"){{- if $method.ReturnSlice -}}
                .Funcs(template.FuncMap{
                "page": {{ $page }},
                })
            {{- end }}
        {{- end }}
        )

        {{ $addr := printf "addr%s" $method.Ident -}}
        {{ $addr }} := __rt.GetBuffer()
        defer __rt.PutBuffer({{ $addr }})
        defer {{ $addr }}.Reset()

        {{ $header := printf "header%s" $method.Ident -}}
        {{ if ne $method.Header "" -}}
            {{ $header }} := __rt.GetBuffer()
            defer __rt.PutBuffer({{ $header }})
            defer {{ $header }}.Reset()
        {{- end }}

        {{ $responseBody := printf "responseBody%s" $method.Ident -}}
        {{ $responseBody }} := __rt.GetBuffer()
        defer __rt.PutBuffer({{ $responseBody }})
        defer {{ $responseBody }}.Reset()

        {{ if $method.ReturnSlice -}}
            loop:
            for {
        {{ end -}}
        var (
        {{ range $index, $type := $method.Out -}}
            {{ if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }} {{ if isPointer $type }}=new({{ getRepr (indirect $type) }}){{ else }}{{ getRepr $type }}{{ end }}
            {{ end -}}
        {{- end -}}
        {{- $err := printf "err%s" $method.Ident }}
        {{- $err }} error
        {{ $httpResponse := printf "httpResponse%s" $method.Ident -}}
        {{ $httpResponse }} *http.Response
        {{ $response := printf "response%s" $method.Ident -}}
        {{ $response }} __rt.Response = imp.{{ methodResp }}()
        )

        if {{ $err }} = template.Must({{ $addrTmpl }}.Parse({{ quote ($method.TmplURL) }})).
        Execute({{ $addr }}, map[string]any{
        {{ if $context.HasInner -}}
            "{{ $context.Ident }}": imp.inner,
        {{ end -}}
        {{ range $index, $ident := $sortIn -}}
            "{{- $ident }}": {{ $ident -}},
        {{ end }}
        }); {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error building '{{ $method.Ident }}' url: %w", {{ $err }})
        }

        {{ $bufReader := printf "bufReader%s" $method.Ident }}
        {{ $mimeHeader := printf "mimeHeader%s" $method.Ident -}}
        {{ if ne $method.Header "" -}}
            if {{ $err }} = template.Must({{ $headerTmpl }}.Parse({{ quote $method.Header }})).
            Execute({{ $header }}, map[string]any{
            {{ if $context.HasInner -}}
                "{{ $context.Ident }}": imp.inner,
            {{ end -}}
            {{ range $index, $ident := $sortIn -}}
                "{{- $ident }}": {{ $ident -}},
            {{ end }}
            }); {{ $err }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            fmt.Errorf("error building '{{ $method.Ident }}' header: %w", {{ $err }})
            }
            {{ $bufReader }} := bufio.NewReader({{ $header }})
            {{ $mimeHeader }}, {{ $err }} := textproto.NewReader({{ $bufReader }}).ReadMIMEHeader()
            if {{ $err }} != nil {
            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            fmt.Errorf("error reading '{{ $method.Ident }}' header: %w", {{ $err }})
            }
        {{- end }}

        {{ $url := printf "url%s" $method.Ident -}}
        {{ $url }} := {{ $addr }}.String()
        {{- $request := printf "request%s" $method.Ident -}}
        {{- $httpMethod := $method.MethodHTTP }}
        {{- if httpMethodHasBody $httpMethod }}
            {{- if headerHasBody $method.Header  }}
                {{ $request }}, {{ $err }} := http.NewRequest{{ if $method.HasContext }}WithContext{{ end }}({{ if $method.HasContext }}ctx, {{ end }}{{ quote $httpMethod }}, {{ $url }}, {{ $bufReader }})
            {{ else }}
                {{ $request }}, {{ $err }} := http.NewRequest{{ if $method.HasContext }}WithContext{{ end }}({{ if $method.HasContext }}ctx, {{ end }}{{ quote $httpMethod }}, {{ $url }}, {{- range $index, $ident := $sortIn -}}
                    {{- if eq $index (sub (len $sortIn) 1) }}
                        {{- $ident }}
                    {{- end }}
                {{- end -}})
            {{ end -}}
        {{ else }}
            {{ $request }}, {{ $err }} := http.NewRequest{{ if $method.HasContext }}WithContext{{ end }}({{ if $method.HasContext }}ctx, {{ end }}{{ quote $httpMethod }}, {{ $url }}, http.NoBody)
        {{ end -}}
        if {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error building '{{ $method.Ident }}' request: %w", {{ $err }})
        }

        {{ if ne $method.Header "" -}}
            {{ $k := printf "k%s" $method.Ident -}}
            {{ $vv := printf "vv%s" $method.Ident -}}
            {{ $v := printf "v%s" $method.Ident -}}
            for {{ $k }}, {{ $vv }} := range {{ $mimeHeader }} {
            for _, {{ $v }} := range {{ $vv }} {
            {{ $request }}.Header.Add({{ $k }}, {{ $v }})
            }
            }
        {{- end }}

        {{- $log := printf "log%s" $method.Ident }}
        {{ $start := printf "start%s" $method.Ident }}
        {{ if $context.HasFeature "api/log" }}
            {{ $start }} := time.Now()
        {{ end }}

        {{ $httpClient := printf "httpClient%s" $method.Ident -}}
        {{ if $context.HasFeature "api/client" }}
            if {{ $httpClient }}, {{ $ok }} := {{ $inner }}.(interface{ Client() *http.Client }); {{ $ok }} {
            {{ $httpResponse }}, {{ $err }} = {{ $httpClient }}.Client().Do({{ $request }})
            } else {
            {{ $httpResponse }}, {{ $err }} = http.DefaultClient.Do({{ $request }})
            }
        {{ else }}
            {{ $httpResponse }}, {{ $err }} = http.DefaultClient.Do({{ $request }})
        {{ end }}

        {{ if $context.HasFeature "api/log" }}
            if {{ $log }}, {{ $ok }} := {{ $inner }}.(interface{ Log(ctx context.Context, caller string, method string, url string, elapse time.Duration) }); {{ $ok }} {
            {{ $log }}.Log({{ if $method.HasContext }}ctx{{ else }}context.Background(){{ end }}, {{ quote $method.Ident }}, {{ quote $httpMethod }}, {{ $url }}, time.Since({{ $start }}))
            }
        {{ end }}

        if {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error sending '{{ $method.Ident }}' request: %w", {{ $err }})
        }

        if _, {{ $err }} = io.Copy({{ $responseBody }}, {{ $httpResponse }}.Body); {{ $err }} != nil {
        {{ $httpResponse }}.Body.Close()
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error copying '{{ $method.Ident }}' response body: %w", {{ $err }})
        } else {
        {{ $httpResponse }}.Body.Close()
        }

        if {{ $httpResponse }}.StatusCode < 200 || {{ $httpResponse }}.StatusCode > 299 {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("response status code %d for '{{ $method.Ident }}' with body: \n\n%s\n\n", {{ $httpResponse }}.StatusCode, {{ $responseBody }}.String())
        }

        if {{ $err }} = {{ $response }}.FromBytes({{ quote $method.Ident }}, {{ $responseBody }}.Bytes()); {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error converting '{{ $method.Ident }}' response: %w", {{ $err }})
        }

        {{ $responseBody }}.Reset()

        if {{ $err }} = {{ $response }}.Err(); {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error returned from '{{ $method.Ident }}' response: %w", {{ $err }})
        }

        if {{ $err }} = {{ $response }}.ScanValues({{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                {{ if not (isPointer $type) }}&{{ end }}v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}); {{ $err }} != nil {
        return {{ range $index, $type := $method.Out -}}
            {{- if lt $index (sub (len $method.Out) 1) -}}
                v{{- $index -}}{{- $method.Ident }},
            {{- end -}}
        {{- end -}}
        fmt.Errorf("error scanning value from '{{ $method.Ident }}' response: %w", {{ $err }})
        }

        {{ if $method.ReturnSlice }}
            {{ $values }} = append({{ $values }}, v0{{- $method.Ident }}...)
            if {{ $response }}.Break() {
            break loop
            }
            }
        {{ end }}

        {{- if $method.ReturnSlice }}
            {{- if $context.HasInner }}
                {{- if $context.HasFeature "api/cache" }}
                    if {{ $cache }}, {{ $ok }} := {{ $inner }}.(interface{
                    SetCache(string, []any, ...any)
                    }); {{ $ok }} {
                    {{ $cache }}.SetCache(
                    {{ quote $method.Ident }},
                    []any{
                    {{- range $index, $ident := $sortIn -}}
                        {{- $ident }},
                    {{- end -}}
                    },
                    {{ range $index, $type := $method.Out -}}
                        {{- if eq $index 0 }}
                            {{- $values -}},
                        {{- else if lt $index (sub (len $method.Out) 1) -}}
                            v{{- $index -}}{{- $method.Ident }},
                        {{- end -}}
                    {{- end -}}
                    )
                    }
                {{- end }}
            {{- end }}

            return {{ range $index, $type := $method.Out -}}
                {{- if eq $index 0 }}
                    {{- $values -}},
                {{- else if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            nil
        {{ else }}
            {{- if $context.HasInner }}
                {{- if $context.HasFeature "api/cache" }}
                    if {{ $cache }}, {{ $ok }} := {{ $inner }}.(interface{
                    SetCache(string, []any, ...any)
                    }); {{ $ok }} {
                    {{ $cache }}.SetCache(
                    {{ quote $method.Ident }},
                    []any{
                    {{- range $index, $ident := $sortIn -}}
                        {{- $ident }},
                    {{- end -}}
                    },
                    {{ range $index, $type := $method.Out -}}
                        {{- if lt $index (sub (len $method.Out) 1) -}}
                            v{{- $index -}}{{- $method.Ident }},
                        {{- end -}}
                    {{- end -}}
                    )
                    }
                {{- end }}
            {{- end }}

            return {{ range $index, $type := $method.Out -}}
                {{- if lt $index (sub (len $method.Out) 1) -}}
                    v{{- $index -}}{{- $method.Ident }},
                {{- end -}}
            {{- end -}}
            nil
        {{ end }}
    {{- else }}
        // TODO
        panic("unimplemented")
    {{- end -}}
    }
{{ end }}
